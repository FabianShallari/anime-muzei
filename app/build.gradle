apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'jacoco-android'

ext {
  //app config
  appId = 'codes.fabio.animemuzei'
  minSdk = 19
  compileSdk = 24
  targetSdk = 24
  buildTools = '24.0.3'
  versionCode = 1
  versionName = '1.0.0'

  // libs config
  supportLibs = '24.2.1'
  jUnit = '4.12'
  espressoCore = '2.2.2'
  muzeiApi = '2.0'
  retrofit2 = '2.1.0'
  dagger2 = '2.7'
  okHttp = '3.4.2'
  autoValue = '1.3'
  autoValueGson = '0.4.4'
  gson = '2.8.0'
  rxJava = '1.2.2'
  timber = '4.3.1'
  crashlyticsVersion = "2.6.5@aar"
  mockito = '1.10.19'
  testRunner = '0.5'
  testRules = '0.5'
  hamcrest = '1.3'
}

//noinspection GroovyMissingReturnStatement
android {

  compileSdkVersion compileSdk
  buildToolsVersion buildTools

  //noinspection GroovyMissingReturnStatement
  defaultConfig {
    applicationId appId
    minSdkVersion minSdk
    targetSdkVersion targetSdk
    versionCode versionCode
    versionName versionName
    buildConfigField "String", "IMGUR_KEY", "\"$imgurPublicKey\""
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    signing {
      keyAlias "$signingKeyAlias"
      keyPassword "$signingKeyPassword"
      storeFile file("$signingKeyStorePath")
      storePassword "$signingStorePassword"
    }
  }

  buildTypes {

    debug {
      testCoverageEnabled true
    }

    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.signing
    }
  }
}


dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')

  // Testing
  androidTestCompile "com.android.support:support-annotations:$supportLibs"
  androidTestCompile "org.mockito:mockito-core:$mockito"
  androidTestCompile "com.android.support.test:runner:$testRunner"
  androidTestCompile "com.android.support.test:rules:$testRules"
  androidTestCompile "org.hamcrest:hamcrest-library:$hamcrest"
  androidTestCompile("com.android.support.test.espresso:espresso-core:$espressoCore", {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  testCompile "junit:junit:$jUnit"
  testCompile "org.mockito:mockito-core:$mockito"
  testCompile "org.robolectric:robolectric:3.1.4"


  // Utils
  //noinspection GradleDependency
  compile "com.android.support:appcompat-v7:$supportLibs"
  compile "com.google.android.apps.muzei:muzei-api:$muzeiApi"
  compile "com.jakewharton.timber:timber:$timber"
  releaseCompile("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
    transitive = true;
  }

  // Auto
  compile "com.google.auto.value:auto-value:$autoValue"
  annotationProcessor "com.google.auto.value:auto-value:$autoValue"
  annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$autoValueGson"
  provided "com.ryanharter.auto.value:auto-value-gson:$autoValueGson"

  // Rx
  compile "io.reactivex:rxjava:$rxJava"

  // Network
  compile "com.squareup.retrofit2:retrofit:$retrofit2"
  compile "com.squareup.retrofit2:retrofit-converters:$retrofit2"
  compile "com.squareup.retrofit2:converter-gson:$retrofit2"
  compile "com.squareup.retrofit2:adapter-rxjava:$retrofit2"
  compile "com.squareup.okhttp3:okhttp:$okHttp"
  compile "com.google.code.gson:gson:$gson"

  // Dagger
  compile "com.google.dagger:dagger:$dagger2"
  annotationProcessor "com.google.dagger:dagger-compiler:$dagger2"
}
